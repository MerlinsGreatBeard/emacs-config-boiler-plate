* Use package
  #+begin_src emacs-lisp :results silent
;; This is only needed once, near the top of the file
(eval-when-compile
  (require 'use-package))
  #+end_src
* Evil mode
#+BEGIN_SRC emacs-lisp :results silent
(use-package evil
  :ensure t
  :diminish evil-mode
  :init 
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key minibuffer-local-map (kbd "C-g") 'minibuffer-keyboard-quit)
  (define-key evil-insert-state-map "ö" 'evil-normal-state)
  (define-key evil-motion-state-map "å" 'evil-end-of-line))
#+END_SRC
* Evil-mc
#+begin_src emacs-lisp :results silent
(use-package evil-mc
  :after evil
  :ensure t
  :diminish ""
  :config
  (global-evil-mc-mode))
  (add-to-list 'evil-mc-incompatible-minor-modes 'lispy-mode)
(use-package evil-mc-extras
  :after evil-mc
  :ensure t
  :config
  (global-evil-mc-extras-mode)
  ;; For some reason the evil-mc-map isn't active in normal mode
  ;; so lets associate to the evil-mc-extras map instead   
  (evil-define-key 'normal evil-mc-extras-key-map
    (kbd "gr") evil-mc-cursors-map
    (kbd "M-n") 'evil-mc-make-and-goto-next-cursor
    (kbd "M-p") 'evil-mc-make-and-goto-prev-cursor
    (kbd "C-n") 'evil-mc-make-and-goto-next-match
    (kbd "C-t") 'evil-mc-skip-and-goto-next-match
    (kbd "C-p") 'evil-mc-make-and-goto-prev-match))
#+end_src
* Org mode
** org-mode
   #+begin_src emacs-lisp :results silent
   (use-package org
   :ensure t)
   #+end_src
* Evil-org-mode
  #+BEGIN_SRC emacs-lisp :results silent
(use-package evil-org
  :ensure t
  :after org
  :diminish evil-org-mode
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
	    (lambda ()
	      (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))))
  ;; (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (evil-define-key 'normal org-mode-map (kbd "C-j") 'org-return-indent)
  (setq org-special-ctrl-a/e t))
  #+END_SRC
* Useful Scripts
** Subscripts
   - Copied from [[http://ergoemacs.org/emacs/elisp_replace_subscript.html]]
   #+begin_src emacs-lisp 
(defun replace-digits-by-subscript (string)
  (replace-regexp-in-string "[0-9]"
			    (lambda (arg) (string (aref "₀₁₂₃₄₅₆₇₈₉" (string-to-number arg)))) string) )
   #+end_src

   #+RESULTS:
   : replace-digits-by-subscript
